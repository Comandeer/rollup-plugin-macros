{"version":3,"file":"rollup-plugin-macros.js","sources":["../src/handleCallExpression.js","../src/handleImportDeclaration.js","../src/index.js"],"sourcesContent":["import { writeFile } from 'node:fs/promises';\nimport { pathToFileURL } from 'node:url';\nimport { Worker } from 'node:worker_threads';\nimport { generate } from 'escodegen';\nimport {  walk } from 'estree-walker';\nimport { temporaryFile } from 'tempy';\n\n/**\n *\n * @param {import( 'rollup' ).AcornNode} node\n * @param {import( './index.js' ).MacroMap} macros\n * @param {import( 'rollup' ).TransformPluginContext[ 'parse' ]} parse\n * @returns {Promise<void>}\n */\nasync function handleCallExpression( node, macros, parse ) {\n\tconst allowedArgNodeTypes = [\n\t\t'Literal',\n\t\t'ObjectExpression',\n\t\t'ArrayExpression'\n\t];\n\tconst name = node.callee.name;\n\n\tif ( !macros.has( name ) ) {\n\t\treturn;\n\t}\n\n\tconst macro = macros.get( name );\n\tconst args = node.arguments;\n\tconst isSupported = args.every( ( { type } ) => {\n\t\treturn allowedArgNodeTypes.includes( type );\n\t} );\n\n\tif ( !isSupported ) {\n\t\tthrow new Error( 'Only macros with arguments of primitive types, object and arrays are supported currently.' );\n\t}\n\n\tconst macroResult = await executeMacro( macro, args );\n\tconst macroResultAST = parse( `( ${ JSON.stringify( macroResult ) } )` );\n\tconst expression = getValueNode( macroResultAST );\n\n\tthis.replace( expression );\n}\n\n/**\n * @param {import( './index.js' ).Macro} macro\n * @param {Array<unknown>} args\n * @returns {Promise<unknown>}\n */\nasync function executeMacro( { name, path }, args ) {\n\tconst alias = name === 'default' ? 'tempName' : name;\n\tconst pathURL = pathToFileURL( path );\n\tconst formattedArgs = args.map( ( node ) => {\n\t\treturn generate( node );\n\t} ).join( ', ' );\n\tconst code = `import { parentPort } from 'node:worker_threads';\n\timport { ${ name } as ${ alias } } from '${ pathURL }';\n\n\tconst result = await ${ alias }( ${ formattedArgs } );\n\n\tparentPort.postMessage( result );`;\n\n\tconst workerFilePath = temporaryFile( {\n\t\textension: 'mjs'\n\t} );\n\n\tawait writeFile( workerFilePath, code, 'utf-8' );\n\n\treturn new Promise( ( resolve, reject ) => {\n\t\tconst worker = new Worker( workerFilePath );\n\n\t\tworker.on( 'message', resolve );\n\t\tworker.on( 'error', reject );\n\t\tworker.on( 'exit', ( exitCode ) => {\n\t\t\tif ( exitCode !== 0 ) {\n\t\t\t\treject( exitCode );\n\t\t\t}\n\t\t} );\n\t} );\n}\n\n/**\n *\n * @param {import( 'rollup' ).AcornNode} node\n * @returns {import( 'rollup' ).AcornNode | null}\n */\nfunction getValueNode( node ) {\n\tconst allowedNodeTypes = [\n\t\t'Literal',\n\t\t'ObjectExpression',\n\t\t'ArrayExpression'\n\t];\n\tlet valueNode;\n\n\twalk( node, {\n\t\tenter( node ) {\n\t\t\tif ( !allowedNodeTypes.includes( node.type ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvalueNode = node;\n\t\t\tthis.skip();\n\t\t}\n\t} );\n\n\treturn valueNode;\n}\n\nexport default handleCallExpression;\n","import { dirname, resolve as resolvePath } from 'pathe';\n\n/**\n *\n * @param {import( 'rollup' ).AcornNode} node\n * @param {import( './index.js' ).MacroMap} macros\n * @param {string} path Path of the current module.\n * @returns {void}\n */\nfunction handleImportDeclaration( node, macros, path ) {\n\tif ( !isMacroImport( node ) ) {\n\t\treturn;\n\t}\n\n\textractMacros( macros, node, path );\n\tthis.remove();\n}\n\n/**\n * @param {import( 'rollup' ).AcornNode} node\n * @returns {boolean}\n */\nfunction isMacroImport( node ) {\n\tif ( !node.assertions ) {\n\t\treturn false;\n\t}\n\n\tconst [ assertion ] = node.assertions;\n\n\treturn assertion.key.name === 'type' && assertion.value.value === 'macro';\n}\n\n/**\n *\n * @param {import( './index.js' ).MacroMap} macros\n * @param {import( 'rollup' ).AcornNode} node\n * @param {string} modulePath The path of the current module.\n * @returns {void}\n */\nfunction extractMacros( macros, node, modulePath ) {\n\tconst moduleDirPath = dirname( modulePath );\n\tconst macroPath = resolvePath( moduleDirPath, node.source.value );\n\n\tnode.specifiers.forEach( ( specifier ) => {\n\t\tconst originalName = specifier.type === 'ImportDefaultSpecifier' ?\n\t\t\t'default' :\n\t\t\tspecifier.imported.name;\n\n\t\tmacros.set( specifier.local.name, {\n\t\t\tname: originalName,\n\t\t\tpath: macroPath\n\t\t} );\n\t} );\n}\n\nexport default handleImportDeclaration;\n","import { generate } from 'escodegen';\nimport { asyncWalk } from 'estree-walker';\nimport handleCallExpression from './handleCallExpression.js';\nimport handleImportDeclaration from './handleImportDeclaration.js';\n\n/**\n * @typedef {Object} Macro\n * @property {string} name The name of the export in the macro module.\n * @property {string} path The path of the macro module.\n */\n\n/**\n * @typedef {string & {}} MacroLocalName\n *\n * The name of the import in the module that use the macro.\n */\n\n/**\n * @typedef {Map<MacroLocalName, Macro>} MacroMap\n */\n\n/**\n * @returns {import( 'rollup' ).Plugin}\n */\nfunction plugin() {\n\treturn {\n\t\tname: '@comandeer/rollup-plugin-macros',\n\n\t\tresolveId( importee, importer, { assertions } ) {\n\t\t\tif ( assertions && assertions.type === 'macro' ) {\n\t\t\t\treturn {\n\t\t\t\t\tid: importee,\n\t\t\t\t\texternal: true\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn null;\n\t\t},\n\n\t\tasync transform( code, path ) {\n\t\t\tconst parse = this.parse;\n\t\t\tconst ast = parse( code );\n\t\t\t/** @type {MacroMap} */\n\t\t\tconst macros = new Map();\n\n\t\t\tawait asyncWalk( ast, {\n\t\t\t\tasync enter( node ) {\n\t\t\t\t\tswitch ( node.type ) {\n\t\t\t\t\tcase 'ImportDeclaration':\n\t\t\t\t\t\treturn handleImportDeclaration.call( this, node, macros, path );\n\n\t\t\t\t\tcase 'CallExpression':\n\t\t\t\t\t\treturn handleCallExpression.call( this, node, macros, parse );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\treturn {\n\t\t\t\tcode: generate( ast )\n\t\t\t};\n\t\t}\n\t};\n}\n\nexport default plugin;\n"],"names":["async","handleCallExpression","node","macros","parse","allowedArgNodeTypes","name","callee","has","macro","get","args","arguments","every","type","includes","Error","macroResult","path","alias","pathURL","pathToFileURL","formattedArgs","map","generate","join","code","workerFilePath","temporaryFile","extension","writeFile","Promise","resolve","reject","worker","Worker","on","exitCode","executeMacro","expression","allowedNodeTypes","valueNode","walk","enter","this","skip","getValueNode","JSON","stringify","replace","handleImportDeclaration","assertions","assertion","key","value","isMacroImport","modulePath","moduleDirPath","dirname","macroPath","resolvePath","source","specifiers","forEach","specifier","originalName","imported","set","local","extractMacros","remove","plugin","resolveId","importee","importer","id","external","ast","Map","asyncWalk","call"],"mappings":";+SAcAA,eAAeC,EAAsBC,EAAMC,EAAQC,GAClD,MAAMC,EAAsB,CAC3B,UACA,mBACA,mBAEKC,EAAOJ,EAAKK,OAAOD,KAEzB,IAAMH,EAAOK,IAAKF,GACjB,OAGD,MAAMG,EAAQN,EAAOO,IAAKJ,GACpBK,EAAOT,EAAKU,UAKlB,IAJoBD,EAAKE,OAAO,EAAIC,UAC5BT,EAAoBU,SAAUD,KAIrC,MAAM,IAAIE,MAAO,6FAGlB,MAAMC,QAYPjB,gBAA6BM,KAAEA,EAAIY,KAAEA,GAAQP,GAC5C,MAAMQ,EAAiB,YAATb,EAAqB,WAAaA,EAC1Cc,EAAUC,EAAeH,GACzBI,EAAgBX,EAAKY,KAAOrB,GAC1BsB,EAAUtB,KACduB,KAAM,MACJC,EAAQ,iEACFpB,QAAaa,aAAmBC,iCAEpBD,MAAYG,8CAI9BK,EAAiBC,EAAe,CACrCC,UAAW,QAKZ,aAFMC,EAAWH,EAAgBD,EAAM,SAEhC,IAAIK,SAAS,CAAEC,EAASC,KAC9B,MAAMC,EAAS,IAAIC,EAAQR,GAE3BO,EAAOE,GAAI,UAAWJ,GACtBE,EAAOE,GAAI,QAASH,GACpBC,EAAOE,GAAI,QAAUC,IACF,IAAbA,GACJJ,EAAQI,EACT,GACE,GAEL,CA1C2BC,CAAc7B,EAAOE,GAEzC4B,EA+CP,SAAuBrC,GACtB,MAAMsC,EAAmB,CACxB,UACA,mBACA,mBAED,IAAIC,EAaJ,OAXAC,EAAMxC,EAAM,CACXyC,MAAOzC,GACAsC,EAAiBzB,SAAUb,EAAKY,QAItC2B,EAAYvC,EACZ0C,KAAKC,OACN,IAGMJ,CACR,CAnEoBK,CADI1C,EAAQ,KAAK2C,KAAKC,UAAW/B,SAGpD2B,KAAKK,QAASV,EACf,CChCA,SAASW,EAAyBhD,EAAMC,EAAQe,IAahD,SAAwBhB,GACvB,IAAMA,EAAKiD,WACV,OAAO,EAGR,MAAQC,GAAclD,EAAKiD,WAE3B,MAA8B,SAAvBC,EAAUC,IAAI/C,MAA6C,UAA1B8C,EAAUE,MAAMA,KACzD,EApBOC,CAAerD,MA6BtB,SAAwBC,EAAQD,EAAMsD,GACrC,MAAMC,EAAgBC,EAASF,GACzBG,EAAYC,EAAaH,EAAevD,EAAK2D,OAAOP,OAE1DpD,EAAK4D,WAAWC,SAAWC,IAC1B,MAAMC,EAAkC,2BAAnBD,EAAUlD,KAC9B,UACAkD,EAAUE,SAAS5D,KAEpBH,EAAOgE,IAAKH,EAAUI,MAAM9D,KAAM,CACjCA,KAAM2D,EACN/C,KAAMyC,GACJ,GAEL,CAvCCU,CAAelE,EAAQD,EAAMgB,GAC7B0B,KAAK0B,SACN,CCQA,SAASC,IACR,MAAO,CACNjE,KAAM,kCAENkE,UAASA,CAAEC,EAAUC,GAAUvB,WAAEA,KAC3BA,GAAkC,UAApBA,EAAWrC,KACtB,CACN6D,GAAIF,EACJG,UAAU,GAIL,KAGR5E,gBAAiB0B,EAAMR,GACtB,MAAMd,EAAQwC,KAAKxC,MACbyE,EAAMzE,EAAOsB,GAEbvB,EAAS,IAAI2E,IAcnB,aAZMC,EAAWF,EAAK,CACrB7E,YAAaE,GACZ,OAASA,EAAKY,MACd,IAAK,oBACJ,OAAOoC,EAAwB8B,KAAMpC,KAAM1C,EAAMC,EAAQe,GAE1D,IAAK,iBACJ,OAAOjB,EAAqB+E,KAAMpC,KAAM1C,EAAMC,EAAQC,GAExD,IAGM,CACNsB,KAAMF,EAAUqD,GAElB,EAEF"}